// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  username       String
  full_name      String
  email          String     @unique
  password       String
  photo_profile  String?
  bio            String?
  created_at     DateTime   @default(now())
  created_by     Int?
  updated_at     DateTime   @updatedAt
  updated_by     Int?

  threads        Thread[]   @relation("UserThreads")
  replies        Reply[]    @relation("UserReplies")
  likes          Like[]

  followedBy     Following[] @relation("FollowingAsFollowing")
  following      Following[] @relation("FollowingAsFollower")
}

model Thread {
  id               Int        @id @default(autoincrement())
  content          String
  image            String?
  number_of_replies Int?
  created_at       DateTime   @default(now())
  created_by       Int?
  updated_at       DateTime   @updatedAt
  updated_by       Int?

  user             User?      @relation("UserThreads", fields: [created_by], references: [id])
  replies          Reply[]
  likes            Like[]
}

model Reply {
  id          Int      @id @default(autoincrement())
  user_id     Int
  thread_id   Int
  image       String?
  content     String
  created_at  DateTime @default(now())
  created_by  Int?
  updated_at  DateTime @updatedAt
  updated_by  Int?

  user        User     @relation("UserReplies", fields: [user_id], references: [id])
  thread      Thread   @relation(fields: [thread_id], references: [id])
}

model Like {
  user_id     Int
  thread_id   Int
  created_at  DateTime @default(now())
  created_by  Int?
  updated_at  DateTime @updatedAt
  updated_by  Int?

  user        User     @relation(fields: [user_id], references: [id])
  thread      Thread   @relation(fields: [thread_id], references: [id])

  @@id([user_id, thread_id])
}

model Following {
  id            Int      @id @default(autoincrement())
  following_id  Int
  follower_id   Int
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  follower      User     @relation("FollowingAsFollower", fields: [follower_id], references: [id])
  following     User     @relation("FollowingAsFollowing", fields: [following_id], references: [id])
}